import { Brain, FileText, Lightbulb, TrendingUp } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

interface CodeAnalysisProps {
  code: string;
}

export const CodeAnalysis = ({ code }: CodeAnalysisProps) => {
  const analysis = {
    complexity: "Medium",
    readability: 85,
    performance: "Good",
    suggestions: [
      "Consider using memoization for recursive functions",
      "Add input validation for edge cases",
      "Function could be optimized with iterative approach"
    ],
    explanation: {
      overview: "This is a recursive implementation of the Fibonacci sequence",
      breakdown: [
        {
          line: "1",
          code: "function fibonacci(n) {",
          explanation: "Function declaration with parameter 'n' representing the position in sequence"
        },
        {
          line: "2",
          code: "if (n <= 1) return n;",
          explanation: "Base case: returns n for values 0 and 1 to prevent infinite recursion"
        },
        {
          line: "3",
          code: "return fibonacci(n - 1) + fibonacci(n - 2);",
          explanation: "Recursive calls: calculates sum of two previous Fibonacci numbers"
        }
      ]
    },
    concepts: ["Recursion", "Base Case", "Mathematical Sequences", "Function Parameters"]
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center space-x-2">
          <Brain className="h-5 w-5" />
          <span>AI Code Analysis</span>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="explanation" className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="explanation">Explanation</TabsTrigger>
            <TabsTrigger value="analysis">Analysis</TabsTrigger>
            <TabsTrigger value="suggestions">Suggestions</TabsTrigger>
            <TabsTrigger value="concepts">Concepts</TabsTrigger>
          </TabsList>

          <TabsContent value="explanation" className="space-y-4">
            <div className="space-y-3">
              <div className="flex items-center space-x-2">
                <FileText className="h-4 w-4 text-primary" />
                <h4 className="font-medium">Code Overview</h4>
              </div>
              <p className="text-sm text-muted-foreground">{analysis.explanation.overview}</p>
              
              <div className="space-y-3">
                <h5 className="font-medium text-sm">Line-by-line breakdown:</h5>
                {analysis.explanation.breakdown.map((item, index) => (
                  <div key={index} className="border-l-2 border-primary/20 pl-4 space-y-1">
                    <div className="flex items-center space-x-2">
                      <Badge variant="outline" className="text-xs">Line {item.line}</Badge>
                      <code className="text-xs bg-muted px-2 py-1 rounded">{item.code}</code>
                </div>
                    <p className="text-xs text-muted-foreground">{item.explanation}</p>
                  </div>
                ))}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="analysis" className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Complexity</span>
                  <Badge variant="secondary">{analysis.complexity}</Badge>
                </div>
              </div>
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Readability</span>
                  <Badge variant="outline">{analysis.readability}%</Badge>
                </div>
              </div>
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Performance</span>
                  <Badge variant="secondary">{analysis.performance}</Badge>
                </div>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="suggestions" className="space-y-4">
            <div className="space-y-3">
              {analysis.suggestions.map((suggestion, index) => (
                <div key={index} className="flex items-start space-x-3 p-3 bg-muted/50 rounded-lg">
                  <Lightbulb className="h-4 w-4 text-primary mt-0.5" />
                  <div className="flex-1 space-y-2">
                    <p className="text-sm">{suggestion}</p>
                    <Button variant="outline" size="sm">
                      Apply Suggestion
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="concepts" className="space-y-4">
            <div className="flex flex-wrap gap-2">
              {analysis.concepts.map((concept, index) => (
                <Badge key={index} variant="outline" className="cursor-pointer hover:bg-primary hover:text-primary-foreground">
                  {concept}
                </Badge>
              ))}
            </div>
            <div className="space-y-3">
              <div className="flex items-center space-x-2">
                <TrendingUp className="h-4 w-4 text-primary" />
                <h4 className="font-medium">Learning Resources</h4>
              </div>
              <div className="grid gap-2">
                <Button variant="outline" size="sm" className="justify-start">
                  ðŸ“š Learn more about Recursion
                </Button>
                <Button variant="outline" size="sm" className="justify-start">
                  ðŸŽ¯ Practice Recursive Problems
                </Button>
                <Button variant="outline" size="sm" className="justify-start">
                  âš¡ Algorithm Optimization Techniques
                </Button>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
};